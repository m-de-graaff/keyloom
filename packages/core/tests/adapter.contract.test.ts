import { beforeEach, describe, expect, it } from 'vitest'
import type { Adapter } from '../src/adapter'
import { memoryAdapter } from '../src/adapters/memory'

function runAdapterContract(make: () => Adapter) {
  describe('Adapter contract', () => {
    let a: Adapter
    beforeEach(() => {
      a = make()
    })

    it('creates and fetches a user', async () => {
      const u = await a.createUser({ email: 'a@b.test' })
      expect(u.id).toBeTruthy()
      const byId = await a.getUser(u.id)
      expect(byId?.email).toBe('a@b.test')
      const byEmail = await a.getUserByEmail('a@b.test')
      expect(byEmail?.id).toBe(u.id)
    })

    it('enforces unique email', async () => {
      await a.createUser({ email: 'dupe@test' })
      await expect(a.createUser({ email: 'dupe@test' })).rejects.toThrow()
    })

    it('links and fetches an account', async () => {
      const u = await a.createUser({ email: 'x@y.z' })
      await a.linkAccount({
        // id will be generated by adapter
        id: undefined as unknown as string,
        userId: u.id,
        provider: 'github',
        providerAccountId: '42',
      } as unknown as Parameters<Adapter['linkAccount']>[0])
      const acc = await a.getAccountByProvider('github', '42')
      expect(acc?.userId).toBe(u.id)
    })

    it('sessions: create/get/delete', async () => {
      const u = await a.createUser({ email: 's@test' })
      const sess = await a.createSession({
        userId: u.id,
        expiresAt: new Date(Date.now() + 60000),
      })
      const got = await a.getSession(sess.id)
      expect(got?.userId).toBe(u.id)
      await a.deleteSession(sess.id)
      const gone = await a.getSession(sess.id)
      expect(gone).toBeNull()
    })

    it('verification tokens: single use', async () => {
      const vt = await a.createVerificationToken({
        identifier: 'a@b',
        token: 'T',
        expiresAt: new Date(Date.now() + 60000),
      })
      const used = await a.useVerificationToken('a@b', 'T')
      expect(used?.id).toBe(vt.id)
      const again = await a.useVerificationToken('a@b', 'T')
      expect(again).toBeNull()
    })
  })
}

runAdapterContract(() => memoryAdapter())
